
# %%writefile app.py

# Import necessary libraries
import streamlit as st
import joblib
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
import time
import requests
from datetime import datetime
import warnings

warnings.filterwarnings('ignore')

# --- Page Configuration and Styling ---

# Set up the Streamlit page with a title, icon, and layout.
# This makes the app look like a single-page dashboard.
st.set_page_config(
    page_title=" LIVER DISEASE CLASSIFICATION ",
    page_icon="🌌",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Apply custom CSS for a "cosmic" or "space" theme.
# This uses Markdown with `unsafe_allow_html=True` to inject CSS.
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700&family=Space+Grotesk:wght@300;400;500&display=swap');
    
    .main {
        background: linear-gradient(135deg, #0b0b2d 0%, #1a1a4a 100%);
        color: #ffffff;
    }
    
    .main-header {
        font-family: 'Orbitron', sans-serif;
        font-size: 3.5rem;
        background: linear-gradient(90deg, #4e54c8, #8f94fb);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        margin-bottom: 0;
        text-shadow: 0 0 10px rgba(143, 148, 251, 0.5);
    }
    
    .sub-header {
        font-family: 'Space Grotesk', sans-serif;
        font-size: 1.5rem;
        color: #8f94fb;
        text-align: center;
        margin-top: 0;
    }
    
    .cosmic-card {
        background: rgba(25, 25, 70, 0.7);
        backdrop-filter: blur(10px);
        border: 1px solid #4e54c8;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 0 15px rgba(78, 84, 200, 0.5);
        margin-bottom: 20px;
    }
    
    .prediction-card {
        background: linear-gradient(135deg, #4e54c8, #8f94fb);
        padding: 25px;
        border-radius: 15px;
        color: white;
        text-align: center;
        box-shadow: 0 0 20px rgba(143, 148, 251, 0.7);
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0% { box-shadow: 0 0 20px rgba(143, 148, 251, 0.7); }
        50% { box-shadow: 0 0 30px rgba(143, 148, 251, 1); }
        100% { box-shadow: 0 0 20px rgba(143, 148, 251, 0.7); }
    }
    
    .stSlider > div > div > div {
        background: linear-gradient(90deg, #4e54c8, #8f94fb);
    }
    
    .stButton > button {
        background: linear-gradient(135deg, #4e54c8, #8f94fb);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 8px;
        font-weight: 600;
        width: 100%;
        font-family: 'Space Grotesk', sans-serif;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(78, 84, 200, 0.7);
    }
    
    .parameter-value {
        font-family: 'Orbitron', sans-serif;
        font-size: 1.1rem;
        color: #8f94fb;
    }
    
    .normal-range {
        font-size: 0.85rem;
        color: #a9b1ff;
        font-style: italic;
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #0b0b2d 0%, #1a1a4a 100%);
    }
    
    .health-indicator {
        height: 10px;
        border-radius: 5px;
        margin: 5px 0;
        transition: all 0.3s ease;
    }
    
    .hud-element {
        border: 1px solid #4e54c8;
        border-radius: 10px;
        padding: 10px;
        background: rgba(15, 15, 40, 0.8);
        margin-bottom: 15px;
    }
    
    .risk-meter {
        height: 20px;
        border-radius: 10px;
        background: linear-gradient(90deg, #00cc00, #ffcc00, #ff3366);
        margin: 10px 0;
        position: relative;
    }
    
    .risk-needle {
        position: absolute;
        top: -5px;
        width: 4px;
        height: 30px;
        background: white;
        border-radius: 2px;
        transform: translateX(-50%);
    }
</style>
""", unsafe_allow_html=True)

# --- Model and Data Functions ---

# Use `st.cache_resource` to load the model and scaler only once.
# This prevents reloading on every user interaction, making the app much faster.
@st.cache_resource
def load_model():
    """
    Loads the pre-trained machine learning model and scaler objects.
    These are saved as `joblib` files.
    """
    try:
        model = joblib.load("liver_disease_rf_model.pkl")
        scaler = joblib.load("scaler.pkl")
        return model, scaler
    except:
        st.error("🚨 Starship systems offline: Model files not found. Please ensure 'liver_disease_rf_model.pkl' and 'scaler.pkl' are in the same directory.")
        return None, None

# Initialize session state for real-time simulation.
# `st.session_state` persists variables across user interactions.
if 'real_time_data' not in st.session_state:
    st.session_state.real_time_data = {
        'time_series': [],
        'current_values': {},
        'animation_frame': 0
    }

# Function to simulate real-time data updates.
# This adds small random fluctuations to the input values to mimic a live data stream.
def simulate_real_time_updates():
    """
    Simulates small fluctuations in patient biomarker values.
    Updates the `real_time_data` in session state for dynamic plots.
    """
    if 'real_time_data' in st.session_state:
        # Define small random fluctuations for each parameter
        fluctuations = {
            'albumin': np.random.uniform(-0.2, 0.2),
            'alkaline_phosphatase': np.random.uniform(-1, 1),
            'alt': np.random.uniform(-0.5, 0.5),
            'ast': np.random.uniform(-0.5, 0.5),
            'bilirubin': np.random.uniform(-0.1, 0.1),
            'cholinesterase': np.random.uniform(-0.05, 0.05),
            'cholesterol': np.random.uniform(-0.05, 0.05),
            'creatinina': np.random.uniform(-0.5, 0.5),
            'ggt': np.random.uniform(-0.3, 0.3),
            'protein': np.random.uniform(-0.1, 0.1)
        }
        
        # Update current values with fluctuations and ensure they stay non-negative
        for key in st.session_state.form_values:
            if key in fluctuations and key in st.session_state.real_time_data['current_values']:
                st.session_state.real_time_data['current_values'][key] = max(
                    st.session_state.form_values[key] + fluctuations[key],
                    0  # Ensure values don't go negative
                )
        
        # Add the new data point to a time series list for trending plots
        timestamp = datetime.now().strftime("%H:%M:%S")
        data_point = {
            'timestamp': timestamp,
            **st.session_state.real_time_data['current_values']
        }
        
        st.session_state.real_time_data['time_series'].append(data_point)
        # Keep the time series list at a manageable size (e.g., last 20 points)
        if len(st.session_state.real_time_data['time_series']) > 20:
            st.session_state.real_time_data['time_series'].pop(0)
        
        st.session_state.real_time_data['animation_frame'] += 1

# Function to calculate a health score based on how close values are to normal ranges.
def calculate_health_score(values):
    """
    Calculates a simple health score (0-100) based on how many
    biomarker values fall within their optimal clinical ranges.
    """
    # Define optimal ranges for each parameter based on standard clinical guidelines
    optimal_ranges = {
        'albumin': (35, 50),
        'alkaline_phosphatase': (40, 130),
        'alt': (7, 56),
        'ast': (10, 40),
        'bilirubin': (2, 21),
        'cholinesterase': (5, 12),
        'cholesterol': (3.5, 5.0),
        'creatinina': (62, 106),
        'ggt': (9, 48),
        'protein': (60, 80)
    }
    
    score = 0
    total_params = 0
    
    for param, (low, high) in optimal_ranges.items():
        if param in values:
            total_params += 1
            value = values[param]
            # Check if the value is within the optimal range
            if low <= value <= high:
                score += 1  # Within optimal range, add full point
            else:
                # Calculate deviation and add a partial score
                if value < low:
                    deviation = (low - value) / low
                else:
                    deviation = (value - high) / high
                
                score += max(0, 1 - deviation) # The closer to 0 deviation, the higher the score
    
    # Return the score as a percentage
    return (score / total_params) * 100 if total_params > 0 else 0

# --- App Layout and Logic ---

# Add a header with columns to center the text.
col1, col2, col3 = st.columns([1, 3, 1])
with col2:
    st.markdown('<h1 class="main-header">🌌 LIVER DISEASE CLASSIFICATION</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">Interstellar Diagnostic Interface • Real-Time Biomarker Analysis</p>', unsafe_allow_html=True)

# Load the model and scaler.
model, scaler = load_model()

# Initialize `form_values` in session state to maintain user inputs.
if 'form_values' not in st.session_state:
    st.session_state.form_values = {
        'age': 47,
        'sex': "Male",
        'albumin': 41.6,
        'alkaline_phosphatase': 68.3,
        'alt': 28.5,
        'ast': 34.8,
        'bilirubin': 11.4,
        'cholinesterase': 8.2,
        'cholesterol': 5.37,
        'creatinina': 81.3,
        'ggt': 39.5,
        'protein': 72.0
    }
    
    # Copy initial form values to the real-time data state
    st.session_state.real_time_data['current_values'] = st.session_state.form_values.copy()

# Create tabs for different sections of the app.
tab1, tab2, tab3, tab4 = st.tabs(["🚀 Diagnostic Console", "📊 Bio-Metrics", "🌠 Health Insights", "⭐ About"])

with tab1:
    # Diagnostic Console tab
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown('<div class="cosmic-card">', unsafe_allow_html=True)
        st.subheader("🛰️ Patient Parameters")
        
        # Two columns for input widgets to save vertical space.
        param_col1, param_col2 = st.columns(2)
        
        with param_col1:
            # Use `st.slider` and `st.radio` for user input, saving values to session state.
            st.session_state.form_values['age'] = st.slider(
                "**Cosmic Age** 🌕", 
                min_value=19, 
                max_value=77, 
                value=st.session_state.form_values['age'],
                help="Earth years of patient existence"
            )
            
            st.session_state.form_values['sex'] = st.radio(
                "**Biological Designation** 🧬",
                ["Female", "Male"],
                index=1 if st.session_state.form_values['sex'] == "Male" else 0
            )
            
            # Create sliders for each biomarker, with normal range information.
            st.session_state.form_values['albumin'] = st.slider(
                "**Albumin** (g/L) 🌟", 
                min_value=14.9, 
                max_value=82.2, 
                value=float(st.session_state.form_values['albumin']), 
                step=0.1,
                help="Normal range: 35-50 g/L"
            )
            st.markdown('<p class="normal-range">Normal range: 35-50 g/L</p>', unsafe_allow_html=True)
            
            st.session_state.form_values['alkaline_phosphatase'] = st.slider(
                "**Alkaline Phosphatase** (U/L) 🪐", 
                min_value=11.3, 
                max_value=416.6, 
                value=float(st.session_state.form_values['alkaline_phosphatase']), 
                step=0.1,
                help="Normal range: 40-130 U/L"
            )
            st.markdown('<p class="normal-range">Normal range: 40-130 U/L</p>', unsafe_allow_html=True)
            
            st.session_state.form_values['alt'] = st.slider(
                "**ALT** (U/L) ⚡", 
                min_value=0.9, 
                max_value=325.3, 
                value=float(st.session_state.form_values['alt']), 
                step=0.1,
                help="Normal range: 7-56 U/L"
            )
            st.markdown('<p class="normal-range">Normal range: 7-56 U/L</p>', unsafe_allow_html=True)
            
            st.session_state.form_values['ast'] = st.slider(
                "**AST** (U/L) 🔥", 
                min_value=10.6, 
                max_value=324.0, 
                value=float(st.session_state.form_values['ast']), 
                step=0.1,
                help="Normal range: 10-40 U/L"
            )
            st.markdown('<p class="normal-range">Normal range: 10-40 U/L</p>', unsafe_allow_html=True)
            
            st.session_state.form_values['bilirubin'] = st.slider(
                "**Bilirubin** (μmol/L) 💛", 
                min_value=0.8, 
                max_value=254.0, 
                value=float(st.session_state.form_values['bilirubin']), 
                step=0.1,
                help="Normal range: 2-21 μmol/L"
            )
            st.markdown('<p class="normal-range">Normal range: 2-21 μmol/L</p>', unsafe_allow_html=True)
        
        with param_col2:
            st.session_state.form_values['cholinesterase'] = st.slider(
                "**Cholinesterase** (kU/L) ⚗️", 
                min_value=1.42, 
                max_value=16.41, 
                value=float(st.session_state.form_values['cholinesterase']), 
                step=0.01,
                help="Normal range: 5-12 kU/L"
            )
            st.markdown('<p class="normal-range">Normal range: 5-12 kU/L</p>', unsafe_allow_html=True)
            
            st.session_state.form_values['cholesterol'] = st.slider(
                "**Cholesterol** (mmol/L) 🧪", 
                min_value=1.43, 
                max_value=9.67, 
                value=float(st.session_state.form_values['cholesterol']), 
                step=0.01,
                help="Normal range: 3.5-5.0 mmol/L"
            )
            st.markdown('<p class="normal-range">Normal range: 3.5-5.0 mmol/L</p>', unsafe_allow_html=True)
            
            st.session_state.form_values['creatinina'] = st.slider(
                "**Creatinine** (μmol/L) ⏳", 
                min_value=8.0, 
                max_value=1079.1, 
                value=float(st.session_state.form_values['creatinina']), 
                step=0.1,
                help="Normal range: 62-106 μmol/L"
            )
            st.markdown('<p class="normal-range">Normal range: 62-106 μmol/L</p>', unsafe_allow_html=True)
            
            st.session_state.form_values['ggt'] = st.slider(
                "**GGT** (U/L) 🌊", 
                min_value=4.5, 
                max_value=650.9, 
                value=float(st.session_state.form_values['ggt']), 
                step=0.1,
                help="Normal range: 9-48 U/L"
            )
            st.markdown('<p class="normal-range">Normal range: 9-48 U/L</p>', unsafe_allow_html=True)
            
            st.session_state.form_values['protein'] = st.slider(
                "**Protein** (g/L) 🛡️", 
                min_value=44.8, 
                max_value=90.0, 
                value=float(st.session_state.form_values['protein']), 
                step=0.1,
                help="Normal range: 60-80 g/L"
            )
            st.markdown('<p class="normal-range">Normal range: 60-80 g/L</p>', unsafe_allow_html=True)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="cosmic-card">', unsafe_allow_html=True)
        st.subheader("🚦 System Status")
        
        # Display static system status indicators using Markdown and CSS.
        status_col1, status_col2 = st.columns(2)
        
        with status_col1:
            st.markdown("**Diagnostic System**")
            st.markdown("<div style='background: #00cc00; height: 10px; border-radius: 5px;'></div>", unsafe_allow_html=True)
            st.markdown("✅ **Online**")
            
            st.markdown("**Bio Network**")
            st.markdown("<div style='background: #00cc00; height: 10px; border-radius: 5px;'></div>", unsafe_allow_html=True)
            st.markdown("✅ **Calibrated**")
        
        with status_col2:
            st.markdown("**Data Integrity**")
            st.markdown("<div style='background: #00cc00; height: 10px; border-radius: 5px;'></div>", unsafe_allow_html=True)
            st.markdown("✅ **Verified**")
            
            st.markdown("**Predictive Analytics**")
            st.markdown("<div style='background: #00cc00; height: 10px; border-radius: 5px;'></div>", unsafe_allow_html=True)
            st.markdown("✅ **Optimal**")
        
        st.markdown("---")
        
        # Display a "Hepatic Health Score" based on the `calculate_health_score` function.
        health_score = calculate_health_score(st.session_state.form_values)
        st.subheader(f"🌡️ Hepatic Health Score: {health_score:.1f}%")
        
        # Use custom HTML/CSS for a risk meter visualization.
        st.markdown('<div class="risk-meter">', unsafe_allow_html=True)
        st.markdown(f'<div class="risk-needle" style="left: {health_score}%;"></div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Display a progress bar and a text message based on the health score.
        if health_score >= 80:
            st.success("**✅ Excellent Liver Health**")
            st.progress(health_score/100)
        elif health_score >= 60:
            st.info("**⚠️ Moderate Liver Health**")
            st.progress(health_score/100)
        else:
            st.error("**🚨 Poor Liver Health**")
            st.progress(health_score/100)
        
        st.markdown("---")
        
        # Prediction button that triggers the machine learning model.
        if st.button("🌠 LAUNCH DIAGNOSTIC SEQUENCE", type="primary"):
            if model is None or scaler is None:
                st.error("🚨 Starship systems offline: Model files not found.")
            else:
                # Prepare input data in the correct order for the model.
                input_data = np.array([[
                    st.session_state.form_values['age'],
                    st.session_state.form_values['albumin'],
                    st.session_state.form_values['alkaline_phosphatase'],
                    st.session_state.form_values['alt'],
                    st.session_state.form_values['ast'],
                    st.session_state.form_values['bilirubin'],
                    st.session_state.form_values['cholinesterase'],
                    st.session_state.form_values['cholesterol'],
                    st.session_state.form_values['creatinina'],
                    st.session_state.form_values['ggt'],
                    st.session_state.form_values['protein'],
                    1 if st.session_state.form_values['sex'] == "Male" else 0
                ]])
                
                # Scale the input data using the pre-trained scaler.
                scaled_data = scaler.transform(input_data)
                
                # Make a prediction and get the probability distribution.
                prediction = model.predict(scaled_data)[0]
                probabilities = model.predict_proba(scaled_data)[0]
                
                # Format the prediction string for display.
                formatted_prediction = prediction.replace('_', ' ').title()
                
                # Display the prediction result in a custom card.
                if prediction == "no_disease":
                    st.markdown(f'''
                    <div class="prediction-card">
                        <h2>🌌 DIAGNOSTIC RESULTS</h2>
                        <h3>✅ {formatted_prediction}</h3>
                        <p>Confidence: {np.max(probabilities)*100:.1f}%</p>
                    </div>
                    ''', unsafe_allow_html=True)
                    st.balloons() # Add a celebratory animation for "no disease".
                else:
                    st.markdown(f'''
                    <div class="prediction-card">
                        <h2>🌌 DIAGNOSTIC RESULTS</h2>
                        <h3>⚠️ {formatted_prediction}</h3>
                        <p>Confidence: {np.max(probabilities)*100:.1f}%</p>
                    </div>
                    ''', unsafe_allow_html=True)
                
                # Create a bar chart of prediction probabilities using Plotly.
                fig = px.bar(
                    x=model.classes_, 
                    y=probabilities, 
                    labels={'x': 'Condition', 'y': 'Probability'},
                    color=model.classes_,
                    color_discrete_sequence=['#4e54c8', '#8f94fb', '#00cc00', '#ff9900', '#ff3366']
                )
                fig.update_layout(
                    title="🪐 Condition Probability Matrix",
                    xaxis_title="",
                    yaxis_title="Probability",
                    showlegend=False,
                    height=300,
                    paper_bgcolor='rgba(0,0,0,0)',
                    plot_bgcolor='rgba(0,0,0,0)',
                    font=dict(color='white')
                )
                st.plotly_chart(fig, use_container_width=True)
                
                # Provide tailored recommendations based on the prediction.
                st.subheader("🛸 Recommended Actions")
                if prediction == "no_disease":
                    st.success("""
                    **✅ Cosmic Health Status: NOMINAL**
                    
                    Continue standard health maintenance protocols:
                    - Maintain balanced nutritional intake
                    - Regular physical activity
                    - Routine health monitoring
                    """)
                elif prediction in ["cirrhosis", "fibrosis"]:
                    st.warning("""
                    **⚠️ ALERT: Structural anomalies detected**
                    
                    Immediate consultation with hepatology specialist recommended.
                    Protocol suggestions:
                    - Avoid hepatotoxic substances
                    - Sodium restriction
                    - Regular monitoring of liver function
                    """)
                elif prediction == "hepatitis":
                    st.warning("""
                    **⚠️ ALERT: Inflammatory patterns detected**
                    
                    Gastroenterologist consultation advised.
                    Protocol suggestions:
                    - Adequate rest
                    - Hydration maintenance
                    - Avoidance of hepatotoxic medications
                    """)
                else:
                    st.info("""
                    **🔍 Further analysis required**
                    
                    Consult healthcare provider for comprehensive evaluation.
                    """)
        
        st.markdown('</div>', unsafe_allow_html=True)

with tab2:
    # Bio-Metrics Visualization tab
    st.markdown('<div class="cosmic-card">', unsafe_allow_html=True)
    st.subheader("📊 Bio-Metrics Visualization")
    
    # Define categories for the radar chart.
    categories = ['Albumin', 'Alk Phos', 'ALT', 'AST', 'Bilirubin', 
                  'Cholinesterase', 'Cholesterol', 'Creatinine', 'GGT', 'Protein']
    
    # Normalize the patient's input values to a 0-1 range for a comparative radar chart.
    normalized_values = [
        (st.session_state.form_values['albumin'] - 14.9) / (82.2 - 14.9),
        (st.session_state.form_values['alkaline_phosphatase'] - 11.3) / (416.6 - 11.3),
        (st.session_state.form_values['alt'] - 0.9) / (325.3 - 0.9),
        (st.session_state.form_values['ast'] - 10.6) / (324.0 - 10.6),
        (st.session_state.form_values['bilirubin'] - 0.8) / (254.0 - 0.8),
        (st.session_state.form_values['cholinesterase'] - 1.42) / (16.41 - 1.42),
        (st.session_state.form_values['cholesterol'] - 1.43) / (9.67 - 1.43),
        (st.session_state.form_values['creatinina'] - 8.0) / (1079.1 - 8.0),
        (st.session_state.form_values['ggt'] - 4.5) / (650.9 - 4.5),
        (st.session_state.form_values['protein'] - 44.8) / (90.0 - 44.8)
    ]
    
    # Create the radar chart using Plotly `go.Figure`.
    fig = go.Figure()
    fig.add_trace(go.Scatterpolar(
        r=normalized_values,
        theta=categories,
        fill='toself',
        name='Patient Values',
        line_color='#8f94fb',
        fillcolor='rgba(143, 148, 251, 0.5)'
    ))
    fig.update_layout(
        polar=dict(
            bgcolor='rgba(15, 15, 40, 0.8)',
            radialaxis=dict(
                visible=True,
                range=[0, 1],
                color='white'
            ),
            angularaxis=dict(
                color='white'
            )
        ),
        showlegend=False,
        height=500,
        margin=dict(l=50, r=50, t=50, b=50),
        paper_bgcolor='rgba(0,0,0,0)',
        font=dict(color='white')
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # Display individual parameter values in a clean, organized format.
    st.subheader("🧪 Parameter Analysis")
    param_col1, param_col2, param_col3 = st.columns(3)
    
    with param_col1:
        st.markdown(f'<div class="hud-element">Albumin: <span class="parameter-value">{st.session_state.form_values["albumin"]} g/L</span></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="hud-element">Alkaline Phosphatase: <span class="parameter-value">{st.session_state.form_values["alkaline_phosphatase"]} U/L</span></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="hud-element">ALT: <span class="parameter-value">{st.session_state.form_values["alt"]} U/L</span></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="hud-element">AST: <span class="parameter-value">{st.session_state.form_values["ast"]} U/L</span></div>', unsafe_allow_html=True)
    
    with param_col2:
        st.markdown(f'<div class="hud-element">Bilirubin: <span class="parameter-value">{st.session_state.form_values["bilirubin"]} μmol/L</span></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="hud-element">Cholinesterase: <span class="parameter-value">{st.session_state.form_values["cholinesterase"]} kU/L</span></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="hud-element">Cholesterol: <span class="parameter-value">{st.session_state.form_values["cholesterol"]} mmol/L</span></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="hud-element">Creatinine: <span class="parameter-value">{st.session_state.form_values["creatinina"]} μmol/L</span></div>', unsafe_allow_html=True)
    
    with param_col3:
        st.markdown(f'<div class="hud-element">GGT: <span class="parameter-value">{st.session_state.form_values["ggt"]} U/L</span></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="hud-element">Protein: <span class="parameter-value">{st.session_state.form_values["protein"]} g/L</span></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="hud-element">Age: <span class="parameter-value">{st.session_state.form_values["age"]} years</span></div>', unsafe_allow_html=True)
        st.markdown(f'<div class="hud-element">Sex: <span class="parameter-value">{st.session_state.form_values["sex"]}</span></div>', unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)

with tab3:
    # Health Insights tab with educational content.
    st.markdown('<div class="cosmic-card">', unsafe_allow_html=True)
    st.subheader("🌠 Liver Health Insights")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Markdown for formatted text and lists.
        st.markdown("""
        ### 🪐 Understanding Liver Function Tests
        
        The liver performs several critical functions in your body's ecosystem:
        
        - **Detoxification**: Processing metabolic waste and foreign substances
        - **Protein synthesis**: Manufacturing essential proteins and enzymes
        - **Bile production**: Facilitating nutrient absorption
        - **Metabolism**: Regulating energy storage and release
        
        Common hepatic conditions include:
        
        - **Hepatitis**: Inflammatory responses in liver tissue
        - **Fibrosis**: Connective tissue accumulation
        - **Cirrhosis**: Advanced architectural distortion
        - **Metabolic dysfunction**: Energy processing impairment
        """)
    
    with col2:
        st.markdown("""
        ### 🛰️ Maintaining Hepatic Health
        
        To optimize liver function:
        
        - Maintain appropriate body mass index
        - Consume balanced macronutrients
        - Engage in regular physical activity
        - Limit hepatotoxic substances
        - Monitor metabolic parameters regularly
        
        ### ⚠️ When to Consult Medical Specialists
        
        Seek professional evaluation if experiencing:
        
        - Jaundice (yellowing of integumentary system)
        - Abdominal discomfort or distension
        - Persistent fatigue patterns
        - Gastrointestinal disturbances
        - Changes in excretory patterns
        """)
    
    st.markdown("---")
    st.subheader("📋 Parameter Reference Ranges")
    
    # Display a static table of normal reference ranges using a Pandas DataFrame.
    ref_data = {
        'Parameter': ['Albumin', 'Alkaline Phosphatase', 'ALT', 'AST', 'Bilirubin', 
                      'Cholinesterase', 'Cholesterol', 'Creatinine', 'GGT', 'Protein'],
        'Normal Range': ['35-50 g/L', '40-130 U/L', '7-56 U/L', '10-40 U/L', '2-21 μmol/L',
                          '5-12 kU/L', '3.5-5.0 mmol/L', '62-106 μmol/L', '9-48 U/L', '60-80 g/L']
    }
    
    ref_df = pd.DataFrame(ref_data)
    # Use `.style.set_properties` for custom table styling.
    st.table(ref_df.style.set_properties(**{
        'background-color': 'rgba(25, 25, 70, 0.7)',
        'color': 'white',
        'border': '1px solid #4e54c8'
    }))
    
    st.markdown('</div>', unsafe_allow_html=True)

with tab4:
    # About tab with technical and disclaimer information.
    st.markdown('<div class="cosmic-card">', unsafe_allow_html=True)
    st.subheader("⭐ About Cosmic Liver Health Guardian")
    
    st.markdown("""
    ### 🌌 How This System Works
    
    The Cosmic Liver Health Guardian utilizes advanced machine learning algorithms
    to analyze hepatic function parameters and provide diagnostic predictions.
    The model was trained on clinical data to identify patterns associated
    with various liver conditions.
    
    ### 🔭 Technical Specifications
    
    - **AI Engine**: Random Forest Classifier with optimized hyperparameters
    - **Data Processing**: StandardScaler for feature normalization
    - **Visualization**: Plotly for interactive 3D graphics
    - **Interface**: Streamlit with custom cosmic theme
    - **Performance**: Optimized for real-time analysis
    
    ### ⚠️ Important Notes
    
    - This system is for informational purposes only
    - It does not replace professional medical advice
    - Always consult with healthcare providers for diagnosis and treatment
    - Results should be interpreted by qualified medical professionals
    
    ### 🚨 Disclaimer
    
    This application is intended for educational and research purposes only.
    It should not be used as a substitute for professional medical advice,
    diagnosis, or treatment. Always seek the advice of your physician or
    other qualified health provider with any questions you may have regarding
    a medical condition.
    """)
    
    st.markdown("---")
    st.caption("© 2025 LIVER DISEASE CLASSIFICATION | Interstellar Medical Division")
    st.markdown('</div>', unsafe_allow_html=True)

# Add a button to manually trigger the real-time simulation update.
if st.button("🔄 Simulate Real-Time Data Stream"):
    simulate_real_time_updates()
    st.success("Real-time data simulation activated!")

# Add a final footer.
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #8f94fb;'>"
    "🌌 For research and educational purposes only | Not for clinical decision making | "
    "LIVER DISEASE CLASSIFICATION"
    "</div>",
    unsafe_allow_html=True
)
